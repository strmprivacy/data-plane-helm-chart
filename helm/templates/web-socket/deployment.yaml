{{ $component := .Values.components.webSocket }}
{{ if $component.enabled }}

{{ $name := $component.name }}
{{ $config := $component.configuration }}
{{ $bootstrap := include "kafkaBootstrap" . }}
{{ $redis := $config.redisHost |
    default (printf "%s.%s" .Values.redis.fullnameOverride .Values.namespace) }}
{{ $data := dict "values" .Values "component" $component }}
{{ $image := include "image" $data }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-socket
  namespace: {{ .Values.namespace }}
  labels:
    strmprivacy.io/app: web-socket
spec:
  replicas: 1
  selector:
    matchLabels:
      strmprivacy.io/app: web-socket
  template:
    metadata:
      labels:
        strmprivacy.io/app: web-socket
    spec:
      {{ if eq .Values.license.installationType "SELF_HOSTED" }}
      imagePullSecrets:
        - name: strmprivacy-docker-registry
      {{ end }}
      containers:
        - name: web-socket
          image: {{ $image }}
          env:
            {{ include "kafkaSecurityEnvironmentVars" .}}
            {{- include "kafkaCredentialsEnvironmentVars" $data -}}
            {{ include "installationEnvironmentVariables" .}}
            {{ if eq .Values.license.installationType "SELF_HOSTED" }}
            {{ include "selfHostedEnvironmentVariables" .}}
            {{ end }}
            - name: STRM_EGRESSPORT
              value: "{{ $config.appPort }}"
            - name: STRM_BOOTSTRAP_SERVERS
              value: {{ $bootstrap }}

          volumeMounts:
          {{- template "clientTruststoreVolumeMount" . }}
          ports:
            - containerPort: {{ $config.appPort }}
              protocol: TCP
          {{ if .Values.enableLivenessChecks }}
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: {{ $config.appPort }}
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /is-alive
              port: {{ $config.appPort }}
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          {{ end }}

        - image: envoyproxy/envoy:v1.21-latest
          name: web-socket-envoy
          ports:
            - containerPort: {{ $config.envoy.port }}
              name: envoy-proxy
              protocol: TCP
            - containerPort: {{ $config.envoy.adminPort }}
              name: envoy-admin
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: envoy-admin
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          volumeMounts:
            - mountPath: /etc/envoy
              mountPropagation: None
              name: envoy-conf
      volumes:
        - configMap:
            defaultMode: 420
            name: web-socket-envoy-config
            optional: false
          name: envoy-conf
        {{- template "clientTruststoreVolume" . }}
  {{ end }}
